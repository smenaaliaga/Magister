boxplot(glxs$redshift)
boxplot(redshift~class, data=glxs)
boxplot(redshift~class, data=glxs
xlab="Redshifht z (helio)", ylab="Clasificación de Hubble")
boxplot(redshift~class, data=glxs,
xlab="Redshifht z (helio)", ylab="Clasificación de Hubble")
boxplot(redshift~class, data=glxs,
ylab="Redshifht z (helio)", x
lab="Clasificación de Hubble")
boxplot(redshift~class, data=glxs,
ylab="Redshifht z (helio)",
xlab="Clasificación de Hubble")
boxplot(data=glxs,
xlab="Clasificación de Hubble")
boxplot(data=glxs, xlab="Clasificación de Hubble")
boxplot(data=glxs, ylab="Redshifht z (helio)")
boxplot(glxs$redshift, ylab="Redshifht z (helio)")
# V (Helios) [km/s]
boxplot(glxs$v, ylab="V (Helios) [km/s]")
boxplot(v~class, data=glxs,
ylab="V (Helios) [km/s]",
xlab="Clasificación de Hubble")
# Diameter [kpc]
boxplot(glxs$diam, ylab="Diameter [kpc]")
boxplot(diam~class, data=glxs,
ylab="Diameter [kpc]",
xlab="Clasificación de Hubble")
sumary(glxs)
summary(glxs)
boxplot(redshift~class, data=glxs,
ylab="Redshifht z (helio)",
xlab="Clasificación de Hubble")
# Redshift
print(xtable(summary(glxs)))
library(xtable)
# Redshift
print(xtable(summary(glxs)))
# Redshift
print(xtable(summary(glxs$redshift)))
# Redshift
print(xtable(summary(glxs$redshift)))
# Redshift
xtable(summary(glxs$redshift))
summary(glxs$redshift)
summary(t(glxs$redshift))
summary(t(glxs$redshift))
# AED
redshift <- glxs$redshift
summary(t(redshift))
redshift
t(summary(redshift))
# AED
t(summary(redshift))
# AED
summary(redshift)
# AED
summarize(redshift)
# AED
summarise(redshift)
# AED
summarize(redshift)
# AED
summarize(glxs$redshift)
# AED
summarise(glxs$redshift)
# AED
# Redshift
xtable(summary(glxs$redshift))
# AED
# Redshift
summary(glxs$redshift)
# V (Helios) [km/s]
boxplot(glxs$v, ylab="V (Helios) [km/s]")
# V (Helios) [km/s]
summary(glxs$v)
boxplot(v~class, data=glxs,
ylab="V (Helios) [km/s]",
xlab="Clasificación de Hubble")
# Diameter [kpc]
summary(glxs$v)
boxplot(glxs$diam, ylab="Diameter [kpc]")
boxplot(diam~class, data=glxs,
ylab="Diameter [kpc]",
xlab="Clasificación de Hubble")
# Diameter [kpc]
summary(glxs$diam)
# Apparent mag (Visible Spectral)
summary(glxs$magVis)
boxplot(glxs$magVis, ylab="Apparent mag (Visible Spectral)")
boxplot(magVis~class, data=glxs,
ylab="Apparent mag (Visible Spectral)",
xlab="Clasificación de Hubble")
# Apparent mag (UV Spectral)
summary(glxs$magUV)
boxplot(glxs$magUV, ylab="Apparent mag (UV Spectral)")
boxplot(magUV~class, data=glxs,
ylab="Apparent mag (UV Spectral)",
xlab="Clasificación de Hubble")
# Correlacion
M = cor(glxs)
corrplot.mixed(M, order = 'AOE')
library(corrplot)
corrplot.mixed(M, order = 'AOE')
# Correlacion
M <- cor(glxs)
# Correlacion
M <- cor(glxs[,1:5])
corrplot.mixed(M, order = 'AOE')
M
xtable(M)
res = PCA(glxs, scale.unit = TRUE, ncp = 5, quali.sup=6, graph = T)
summary(res)
summary(res$var)
summary(res[1])
summary(res[2])
summary(res$var$coord)
summary(res$var)
res$var
res$var$contrib
res$var
xtable(res$var$contrib)
res = PCA(glxs, scale.unit = TRUE, ncp = 4, quali.sup=6, graph = T)
summary(res)
xtable(res$var$contrib)
xtable(res$var$cor)
xtable(res$var$contrib)
summary(res)
fviz_pca_ind(res,  label="none", habillage=glxs$class,
addEllipses=TRUE, ellipse.level=0.75)
class = MCA(glxs, scale.unit = TRUE, ncp = 4, quali.sup=6, graph = T)
class = MCA(glxs, ncp = 4, quali.sup=6, graph = T)
class = MCA(glxs, quali.sup=6, graph = T)
hcpc = HCPC(class)
class = MCA(glxs, quali.sup=6, graph = T)
class = MCA(glxs, quali.sup=6, graph = T)
class = MCA(glxs[, 1:5], quali.sup=6, graph = T)
class = MCA(glxs, quali.sup=6, graph = F)
class = MCA(glxs, quali.sup=5, graph = T)
class = MCA(glxs, quali.sup=6, graph = T)
# Transform
glxs <- glxs %>%
select(
name = Cross.identifications.2,
redshift = Redshifht.z..helio.,
v = V..Helios...km.s.,
diam = Diameter..kpc.,
magVis = Apparent.mag..Visible.Spectral.,
magUV = Apparent.mag..UV.Spectral.,
class = Classification
) %>% mutate(
redshift = as.numeric(redshift),
v = as.numeric(v),
diam = as.numeric(diam),
magVis = as.numeric(magVis),
magUV = as.numeric(magUV),
class = as.factor(class)
)
# Import dataset
glxs <- read.csv2('Galaxies Dataset.csv', sep=',')
# View
View(glxs)
# Transform
glxs <- glxs %>%
select(
name = Cross.identifications.2,
redshift = Redshifht.z..helio.,
v = V..Helios...km.s.,
diam = Diameter..kpc.,
magVis = Apparent.mag..Visible.Spectral.,
magUV = Apparent.mag..UV.Spectral.,
class = Classification
) %>% mutate(
redshift = as.numeric(redshift),
v = as.numeric(v),
diam = as.numeric(diam),
magVis = as.numeric(magVis),
magUV = as.numeric(magUV),
class = as.factor(class)
)
# Galaxy Names to Row Name
rownames(glxs) <- glxs[,1]
glxs[,1] <- NULL
class = MCA(glxs, quali.sup=6, graph = T)
class = MCA(glxs, quali.sup=6, graph = T)
# Clasificación por Principal Component Analysis
data(tea)
class = MCA(tea, quali.sup=6, graph = T)
res.mca = MCA(tea, ncp=20, quanti.sup=19, quali.sup=c(20:36), graph=T)
View(tea)
hcpc <- HCPC(res, graph = T)
hcpc <- HCPC(res, graph = T)
library(dplyr)
library(nnet)
library(knitr)
df <- read.csv('nhanes_adult.csv')
setwd('~/Desktop')
df <- read.csv('nhanes_adult.csv')
# Read csv
df <- read.csv('nhanes_adult.csv')
#
head(df)
# ¿Podremos usar la edad y su actividad física para predecir su estado de salud?
# AED
glimpse(df)
install.packages('dplyr')
install.packages("dplyr")
# install.packages('dplyr')
library(dplyr)
# ¿Podremos usar la edad y su actividad física para predecir su estado de salud?
# AED
glimpse(df)
# Conversion a factor
df$HealthGen <- as.factor(df$HealthGen)
df$PhysActive <- as.factor(df$PhysActive)
# Vistazo
glimpse(df)
# Resumen númerica
summary(df)
# Ajustar a Regresión Logística Multinomial
fit <- nnet::multinom(HealthGen ~ Age + PhysActive, df)
fit
tidy(df, exponentiate = False, conf.int = T) %>% kable(digits = 3, format = 'simple')
library(knitr)
tidy(df, exponentiate = False, conf.int = T) %>% kable(digits = 3, format = 'simple')
library(tidy)
install.packages('tidy')
library(tidy)
dplyr::tidy(df, exponentiate = False, conf.int = T) %>% kable(digits = 3, format = 'simple')
install.packages("tidymodels")
library(tidymodels)
tidy(df, exponentiate = False, conf.int = T) %>% kable(digits = 3, format = 'simple')
# Formato de resultado
tidy(fit, exponentiate = False, conf.int = T) %>% kable(digits = 3, format = 'simple')
# Formato de resultado
tidy(fit, exponentiate = F, conf.int = T) %>% kable(digits = 3, format = 'simple')
# Predicciones
predict(fit)
# Predicciones
predict(fit, type = 'probs')
# Predicciones
pred <- predict(fit, type = 'probs')
# Formato de prediccion
as_tibble(pred) %>% mutate(obs_num = 1:n()) %>% slice(1:10)
# Prediccion de un dato nuevo
newdata = list('Age' = 34, 'PhysActive' = factor('No'))
predict(pred, type = 'probs', newdata = newdata)
predict(fit, type = 'probs', newdata = newdata)
library(VGAM)
install.packages('VGAM')
polviews <- read.table('Polviews.csv')
# Vista de datos
View(polviews)
# read
polviews <- read.table('Polviews.csv', sep = ';')
# read
polviews <- read.table('Polviews.csv', sep = ';')
# Vista de datos
View(polviews)
# read
polviews <- read.table('Polviews.csv', sep = ';', header = 1)
# Vista de datos
View(polviews)
library(VGAM)
#
fit <- vglm(cbind(y1,y2,y3,y4,y5) ~ party + gender,
data = polviews,
family=cumulative(parallel = T))
# summary
summary(fit)
# read data
polviews <- read.table('stem cell research survey.csv', sep = ';', header = 1)
# read data
survey <- read.table('stem cell research survey.csv', sep = ';', header = 1)
View(survey)
# vista de datos
View(survey)
# ajuste
fit <- vglm(cbind(y1,y2,y3,y4) ~ creencia,
data = survey,
family=cumulative(parallel = T))
# summary
summary(fit)
# ajuste
fit_p <- vglm(cbind(y1,y2,y3,y4,y5) ~ party + gender,
data = polviews,
family=cumulative(parallel = T))
# summary
summary(fit_p)
# ajuste
fit_p <- vglm(cbind(y1,y2,y3,y4,y5) ~ party + gender,
data = polviews,
family=cumulative(parallel = T))
# read data
polviews <- read.table('Polviews.csv', sep = ';', header = 1)
# ajuste
fit_p <- vglm(cbind(y1,y2,y3,y4,y5) ~ party + gender,
data = polviews,
family=cumulative(parallel = T))
# summary
summary(fit_p)
survey$creencia <- relevel(survey$creencia, ref='moderado')
survey$creencia <- relevel(survey$creencia, ref='moderado')
# Como fijar el nivel de referencias para VGLM
survey$creencia <- as.factor(survey$creencia)
survey$creencia <- relevel(survey$creencia, ref='moderado')
# ajuste
fit_s <- vglm(cbind(y1,y2,y3,y4) ~ creencia,
data = survey,
family=cumulative(parallel = T))
# summary
summary(fit_s)
survey$creencia <- relevel(survey$creencia, ref='fundamentalista')
# ajuste
fit_s <- vglm(cbind(y1,y2,y3,y4) ~ creencia,
data = survey,
family=cumulative(parallel = T))
# summary
summary(fit_s)
survey$creencia <- relevel(survey$creencia, ref='liberal')
# ajuste
fit_s <- vglm(cbind(y1,y2,y3,y4) ~ creencia,
data = survey,
family=cumulative(parallel = T))
# summary
summary(fit_s)
install.packages('catdata')
data(knee)
knee
library(catdata)
knee
data(knee)
knee
chisq.test(knee$Th, knee$R4)
knee$R4 <- as.ordered(knee$R4)
knee$Th <- as.factor(knee$Th)
View(knee)
# ajuste
fit_k <- vglm(cbind(R4) ~ Th,
data = knee,
family=cumulative(parallel = T))
# summary
summary(fit_k)
# ajuste
fit_k <- vglm(cbind(R4) ~ Th + Age<,
data = knee,
family=cumulative(parallel = T))
# summary
summary(fit_k)
# ajuste
fit_k <- vglm(cbind(R4) ~ Th + Age<,
data = knee,
family=cumulative(parallel = T))
# ajuste
fit_k <- vglm(cbind(R4) ~ Th + Age,
data = knee,
family=cumulative(parallel = T))
# summary
summary(fit_k)
# Libreria MASS
library(MASS)
plr1 <- polr(R4 + Th + Age, method = "logistic", data = knee)
summary(plr1)
plr1 <- polr(R4 + Th + Age, method = "logistic", data = knee)
plr1 <- polr(R4 ~ Th + Age, method = "logistic", data = knee)
summary(plr1)
exp(-coef(plor1))
exp(-coef(plr1))
data('PimaIndiansDiabetes2', package = 'mlbench')
library(glment)
library(mlbench)
install.packages(glment)
install.packages(glmnet)
install.packages('glmnet')
install.packages('mlbench')
library(tydiverse)
library(tidyverse)
library(caret)
data('PimaIndiansDiabetes2', package = 'mlbench')
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
x <- model.matrix(diabetes ~ ., PimaIndiansDiabetes2)
x
y <- ifelse(PimaIndiansDiabetes2$diabetes == 'pos', 1, 0)
y
l1mod_1 <- glmnet(x, y, family = 'binomial', lambda = 1.0, alpha = 1)
install.packages('glmnet')
library(glmet)
l1mod_1 <- glmnet(x, y, family = 'binomial', lambda = 1.0, alpha = 1)
library(glmnet)
l1mod_1 <- glmnet(x, y, family = 'binomial', lambda = 1.0, alpha = 1)
# alpha = 1 : lasso
# alpha = 0 : ridge
# alpha ~ ]0, 1[ : elastic net
l1mod_1
l1mod_2 <- glmnet(x, y, family = 'binomial', lambda = 0.1, alpha = 1)
l1mod_2
# alpha = 1 : lasso
# alpha = 0 : ridge
# alpha ~ ]0, 1[ : elastic net
coef(l1mod_1)
coef(l1mod_2)
l1mod_3 <- glmnet(x, y, family = 'binomial', lambda = 0.01, alpha = 1)
coef(l1mod_3)
coef(l1mod_4)
l1mod_4 <- glmnet(x, y, family = 'binomial', lambda = 0.001, alpha = 1)
coef(l1mod_4)
lr1 <- glm(diabetes ~ ., data = PimaIndiansDiabetes2, family = binomial(link = logit))
summary(lr1)
training_samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = .8, list = F)
training_samples
train.data <- PimaIndiansDiabetes2[training_samples, ]
test.data <- PimaIndiansDiabetes2[-training_samples, ]
x_train <- model.matrix(diabetes ~ ., train.data)[, -1]
y_train <- ifelse(train.data$diabetes == 'pos', 1, 0)
# Busqueda de lambdas optimos con Cross-Validation
cv.lasso <- cv.glmnet(x_train, y_train, alpha = 1, type.measure = 'class')
# Busqueda de lambdas optimos con Cross-Validation
cv.lasso <- cv.glmnet(x_train, y_train, alpha = 1, type.measure = 'class')
plot(cv.lasso)
# Busqueda de lambdas optimos con Cross-Validation
cv.lasso <- cv.glmnet(x_train, y_train, alpha = 1, type.measure = 'class', n_folds = 10)
plot(cv.lasso)
# Busqueda de lambdas optimos con Cross-Validation
set.seed(111)
cv.lasso <- cv.glmnet(x_train, y_train, alpha = 1, type.measure = 'class', n_folds = 10)
plot(cv.lasso)
# CARET
# Test y Training
set.seed(111)
training_samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = .8, list = F)
training_samples
train.data <- PimaIndiansDiabetes2[training_samples, ]
test.data <- PimaIndiansDiabetes2[-training_samples, ]
x_train <- model.matrix(diabetes ~ ., train.data)[, -1]
y_train <- ifelse(train.data$diabetes == 'pos', 1, 0)
# Busqueda de lambdas optimos con Cross-Validation
cv.lasso <- cv.glmnet(x_train, y_train, alpha = 1, type.measure = 'class', n_folds = 10)
plot(cv.lasso)
View(PimaIndiansDiabetes2)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
gbmFit1 <- train(Class ~ ., data = training,
method = "glmne",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1 <- train(Class ~ ., data = training,
method = "glmnet",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
train.data
gbmFit1 <- train(diabetes ~ ., data = train.data,
method = "glmnet",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
View(gbmFit1)
gbmFit1
plot(gbmFit2)
plot(gbmFit1)
# Set Working Directory
setwd('~/Documents/Magister/Modelos Lineales para Clasificación/RL Tarea')
# Get Data
data <- read.csv('HR-Employee.csv')
View(data)
plot(data$PerformanceRating)
plot(data$JobSatisfaction)
# AED
plot(data)
# AED
str(data)
# Libraries
library(tidyverse)
sum(is.na(data))
# AED
?str
# cols
num_cols <- unlist(lapply(data, is.numeric))
num_cols
# cols
num_cols <- select_if(data, is.numeric)
num_cols
head(num_cols)
#### AED ####
# Structure
str(data)
select_if(data, is.character)
cat_cols <- select_if(data, is.character)
View(cat_cols)
View(num_cols)
summary(num_cols)
uniques(num_cols)
ggpairs(data, aes(colour = JobSatisfaction, alpha = 0.4))
library(GGally)
ggpairs(data, aes(colour = JobSatisfaction, alpha = 0.4))
ggpairs(num_cols, aes(colour = data$JobSatisfaction, alpha = 0.4))
data$JobSatisfaction <- as.factor(data$JobSatisfaction)
ggpairs(data, aes(colour = data$JobSatisfaction, alpha = 0.4))
ggpairs(num_cols, aes(alpha = 0.4))
ggpairs(num_cols)
pairs(num_cols)
corrplot(num_cols)
chart.Correlation(num_cols, histogram=TRUE, pch=19)
pairs(num_cols)
