install.packages("DBI")
install.packages("odbc")
library(odbc)
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(), "vpn.sb.cl")
con <- dbConnect(odbc(), "vpn.sb.cl")
con <- dbConnect(odbc(), "vpn.sb.cl")
con <- dbConnect(odbc(), "vpn.sb.cl")
?dbConnect
# Recibe reglas de validacion de datos según un criterio
# La variable guarda la validación
v5 = validator(data$X5>0 & data$X5<10)
cf5 = confront(data,v5)
summary(cf5)
barplot(cf5)
library(validate)
library(tidyverse)
library(reshape2)
library(corrplot)
library(VIM)
var <- sample(c(4,5,6,7,8,), prob=c(.2,.3,..,.1), size=1)
data <- read.csv2("resultados.csv")
xs <- data %>% select(X5,X8,X14,X18)
xs_fact <- melt(xs)
varObjt <- data %>% select(X5,X8,X14,X18,monto)
# Recibe reglas de validacion de datos según un criterio
# La variable guarda la validación
v5 = validator(data$X5>0 & data$X5<10)
cf5 = confront(data,v5)
summary(cf5)
barplot(cf5)
setwd("G:/Mi unidad/Magister/Modelación estadística Aplicaciones Multidisciplinaria/Tarea 2")
data <- read.csv2("resultados.csv")
xs <- data %>% select(X5,X8,X14,X18)
xs_fact <- melt(xs)
varObjt <- data %>% select(X5,X8,X14,X18,monto)
# Recibe reglas de validacion de datos según un criterio
# La variable guarda la validación
v5 = validator(data$X5>0 & data$X5<10)
cf5 = confront(data,v5)
summary(cf5)
barplot(cf5)
cf5
# ¿Donde estan las inconsistencia?
values(cf5)
which(is.na(values(cf5)))
# Graficamente, ¿Donde hay inconsistencias?
aggr(varObjt, sortComb=TRUE, sortVar=TRUE,only.miss=TRUE, cex.axis=0.6, numbers=TRUE,cex.numbers=0.6)
simputation
#install.packages('simputation')
library(simputation)
# Imputar con la mediana
X_imputados <- impute_median(varObjt,X5+X8+X14+X18~1)
summary(X_imputados[,-5])
summary(varObjt[,-5])
# Imputar con la mediana
X_imputados <- impute_median(varObjt,X5~is.na(data$X14))
is.na(data$X14)
rand.imput <-function(x){
missing <- (is.na(x)) #vector booleano
n.missing <- sum(missing)#Numero de NA’s
x.obs <- x[!missing]#Datos no NA
imputed <- x
imputed[missing] <- sample(x.obs,n.missing,replace = T)
#Se extrae una muestra aleatoria conocida y se remplazan estos en los NA
return(imputed)}
complete.X5 <- rand.imput(data$X5)
summary(complete.X5)
table(data$X5)
COUNT(data$X5)
count(data$X5)
summary(data$X5)
length(data)
View(data)
summary(data)
summary(data$X5)
320-13
table(data$X5)
complete.X5 <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(2/307,5/307,14/307,13/307,27/307,
36/307,36/307,67/307,61/307,82/307),
size=1)
2/307
complete.X5 <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(2/307,5/307,14/307,13/307,27/307,
36/307,67/307,61/307,82/307),
size=1)
complete.X5 <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(2/307,5/307,14/307,13/307,27/307,
36/307,67/307,61/307,82/307),
size=1)
complete.X5 <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(2/307,5/307,14/307,13/307,27/307,
36/307,67/307,61/307,82/307),
size=1)
complete.X5 <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(2/307,5/307,14/307,13/307,27/307,
36/307,67/307,61/307,82/307),
size=1)
complete.X5 <- rand.imput(data$X5)
summary(data$X8)
table(data$X8)
complete.X8 <- rand.imput(data$X8,3,2,8,30,33,55,107,72,310)
complete.X8 <- rand.imput(data$X8,0,3,2,8,30,33,55,107,72,310)
rand.imput <-function(x,a,b,c,d,e,f,g,h,i,tot){
missing <- (is.na(x)) #vector booleano
n.missing <- sum(missing)#Numero de NA’s
x.obs <- x[!missing]#Datos no NA
imputed <- x
imputed[missing] <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(a/tot,b/tot,c/tot,d/tot,e/tot,
f/tot,g/tot,h/tot,i/tot),
size=1)
return(imputed)}
summary(data$X8)
table(data$X8)
complete.X8 <- rand.imput(data$X8,0,3,2,8,30,33,55,107,72,310)
summary(complete.X5)
#Se extrae una muestra aleatoria conocida y se remplazan estos en los NA
return(imputed)}
rand.imput <-function(x){
missing <- (is.na(x)) #vector booleano
n.missing <- sum(missing)#Numero de NA’s
x.obs <- x[!missing]#Datos no NA
imputed <- x
imputed[missing] <- sample(x.obs,n.missing,replace = T)
#Se extrae una muestra aleatoria conocida y se remplazan estos en los NA
return(imputed)}
complete.X8 <- rand.imput(data$X8)
summary(complete.X8)
#### Imputación aleatoria
rand.imput <-function(x,a,b,c,d,e,f,g,h,i,tot){
missing <- (is.na(x)) #vector booleano
n.missing <- sum(missing)#Numero de NA’s
x.obs <- x[!missing]#Datos no NA
imputed <- x
imputed[missing] <- sample(c(1,2,3,4,5,6,7,8,9),
prob=c(a/tot,b/tot,c/tot,d/tot,e/tot,
f/tot,g/tot,h/tot,i/tot),
size=1)
return(imputed)}
table(data$X8)
summary(data$X8)
table(data$X8)
complete.X8 <- rand.imput(data$X8,0,3,2,8,30,33,55,107,72,310)
summary(complete.X8)
summary(complete.X5)
summary(data$X5)
summary(complete.X5)
summary(data$X5)
summary(complete.X5)
summary(data$X8)
table(data$X8)
complete.X8 <- rand.imput(data$X8,0,3,2,8,30,33,55,107,72,310)
summary(complete.X8)
summary(data$X8)
table(data$X8)
complete.X8 <- rand.imput(data$X8,0,3,2,8,30,33,55,107,72,310)
summary(complete.X8)
summary(data$X14)
summary(data$X14)
table(data$X14)
complete.X8 <- rand.imput(data$X8,5,14,8,19,41,14,43,36,44,320-96)
summary(complete.X8)
summary(data$X14)
table(data$X14)
complete.X14 <- rand.imput(data$X14,5,14,8,19,41,14,43,36,44,320-96)
summary(complete.X14)
summary(data$X14)
table(data$X14)
complete.X14 <- rand.imput(data$X14,5,14,8,19,41,14,43,36,44,320-96)
summary(complete.X14)
summary(data$X14)
table(data$X14)
complete.X14 <- rand.imput(data$X14,5,14,8,19,41,14,43,36,44,320-96)
summary(complete.X14)
summary(data$X18)
summary(data$X18)
table(data$X18)
complete.X18 <- rand.imput(data$X18,4,4,4,10,19,25,32,79,68,320-75)
summary(complete.X18)
#Se extrae una muestra aleatoria conocida y se remplazan estos en los NA
return(imputed)}
complete.monto <- rand.imput(data$monto)
imputed <- x
rand.imput <-function(x){
missing <- (is.na(x)) #vector booleano
n.missing <- sum(missing)#Numero de NA’s
x.obs <- x[!missing]#Datos no NA
imputed <- x
imputed[missing] <- sample(x.obs,n.missing,replace = T)
#Se extrae una muestra aleatoria conocida y se remplazan estos en los NA
return(imputed)}
complete.monto <- rand.imput(data$monto)
summary(data$monto)
summary(complete.monto)
summary(data$monto)
sd(data$monto)
summary(complete.monto)
sd(complete.monto)
summary(data$monto)
sd(data$monto, na.rm=TRUE)
summary(complete.monto)
sd(complete.monto)
# X5
cor.test(data$X5, data$X8, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
cor.test(data$X5, data$X14, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
monto_imputado
varObjt
monto_cs_imputacion
monto_cs_imputacion <- data.frame(cbind(varObjt$monto, monto_imputado$monto))
monto_cs_imputacion <- monto_cs_imputacion %>% rename("Sin imputar"=X1, 'Imputado con media'=X2)
#install.packages('simputation')
library(simputation)
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
monto_imputado
varObjt
monto_cs_imputacion
monto_cs_imputacion <- data.frame(cbind(varObjt$monto, monto_imputado$monto))
monto_cs_imputacion <- monto_cs_imputacion %>% rename("Sin imputar"=X1, 'Imputado con media'=X2)
summary(monto_cs_imputacion)
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
monto_imputado
varObjt
monto_cs_imputacion
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
#install.packages('simputation')
library(simputation)
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
# MONTO
varObjt <- varObjt %>% select(monto, X5, X8, X14, X18)
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
monto_cs_imputacion
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
# Imputar con la mediana
X_imputados <- impute_median(varObjt,X5~is.na(data$X14))
summary(X_imputados[,-5])
summary(varObjt[,-5])
is.na(data$X14)
summary(varObjt[,-5])
is.na(data$X14)
summary(X_imputados[,-5])
# X5
cor.test(data$X5, data$X8, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
cor.test(data$X5, data$X14, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
# X5
cor.test(data$X5, data$X8, method="spearman")
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")
# X5
cor.test(data$X5, data$X8, method="spearman").rho
# X5
cor.test(data$X5, data$X8, method="spearman")[1]
# X5
cor.test(data$X5, data$X8, method="spearman")[0]
# X5
cor.test(data$X5, data$X8, method="spearman")[2]
# X5
cor.test(data$X5, data$X8, method="spearman")[1]
# X5
cor.test(data$X5, data$X8, method="spearman")[0]
# X5
cor.test(data$X5, data$X8, method="spearman")[2]
# X5
cor.test(data$X5, data$X8, method="spearman")[3]
# X5
cor.test(data$X5, data$X8, method="spearman")[3]
cor.test(data$X5, data$X18, method="spearman")[3]
cor.test(data$X5, data$X14, method="spearman")[3]
cor.test(data$X5, data$X18, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X18, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X14, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X18, method="spearman")[3]
# X8
cor.test(data$X8, data$X5, method="spearman")[3]
cor.test(data$X8, data$X14, method="spearman")[3]
cor.test(data$X8, data$X18, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X5, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X14, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X18, method="spearman")[3]
# X8
cor.test(data$X8, data$X5, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X5, method="spearman")[3]
cor.test(data$X8, data$X14, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X14, method="spearman")[3]
cor.test(data$X8, data$X18, method="spearman")[3]
cor.test(X_imputados$X8, X_imputados$X18, method="spearman")[3]
# X5
cor.test(data$X5, data$X8, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")[3]
cor.test(complete.X5, complete.X8, method="spearman")[3]
# X5
cor.test(data$X5, data$X8, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")[3]
cor.test(complete.X5, complete.X8, method="spearman")[3]
# X5
cor.test(data$X5, data$X8, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")[3]
cor.test(complete.X5, complete.X8, method="spearman")[3]
cor.test(data$X5, data$X14, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X14, method="spearman")[3]
cor.test(complete.X5, complete.X14, method="spearman")[3]
cor.test(data$X5, data$X18, method="spearman")[3]
cor.test(X_imputados$X5, X_imputados$X18, method="spearman")[3]
cor.test(complete.X5, complete.X18, method="spearman")[3]
# X5
cor.test(data$X5, data$X8, method="spearman")
# X5
cor.test(data$X5, data$X8, method="spearman")
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")
cor.test(complete.X5, complete.X8, method="spearman")
# X5
cor.test(data$X5, data$X8, method="spearman")
cor.test(X_imputados$X5, X_imputados$X8, method="spearman")
cor.test(complete.X5, complete.X8, method="spearman")
cor.test(data$X5, data$X14, method="spearman")
cor.test(X_imputados$X5, X_imputados$X14, method="spearman")
cor.test(complete.X5, complete.X14, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
cor.test(X_imputados$X5, X_imputados$X18, method="spearman")
cor.test(complete.X5, complete.X18, method="spearman")
cor.test(data$X5, data$X18, method="spearman")
cor.test(X_imputados$X5, X_imputados$X18, method="spearman")
cor.test(complete.X5, complete.X18, method="spearman")
# X8
cor.test(data$X8, data$X14, method="spearman")
cor.test(X_imputados$X8, X_imputados$X14, method="spearman")
# X8
cor.test(data$X8, data$X5, method="spearman")
# X8
cor.test(data$X8, data$X5, method="spearman")[2]
# X8
cor.test(data$X8, data$X5, method="spearman")[1]
# X8
cor.test(data$X8, data$X5, method="spearman")[3]
# X8
cor.test(data$X8, data$X5, method="spearman")[4]
# X8
cor.test(data$X8, data$X5, method="spearman")[4]
cor.test(X_imputados$X8, X_imputados$X5, method="spearman")[4]
cor.test(complete.X8, complete.X5, method="spearman")[4]
cor.test(data$X8, data$X14, method="spearman")[4]
cor.test(X_imputados$X8, X_imputados$X14, method="spearman")[4]
cor.test(complete.X8, complete.X14, method="spearman")[4]
cor.test(data$X8, data$X14, method="spearman")[4]
cor.test(X_imputados$X8, X_imputados$X14, method="spearman")[4]
cor.test(complete.X8, complete.X14, method="spearman")[4]
cor.test(data$X8, data$X18, method="spearman")[4]
cor.test(X_imputados$X8, X_imputados$X18, method="spearman")[4]
cor.test(complete.X8, complete.X18, method="spearman")[4]
# X14
cor.test(data$X14, data$X5, method="spearman")[4]
cor.test(X_imputados$X14, X_imputados$X5, method="spearman")[4]
cor.test(complete.X14, complete.X5, method="spearman")[4]
cor.test(data$X14, data$X8, method="spearman")[4]
cor.test(X_imputados$X14, X_imputados$X8, method="spearman")[4]
cor.test(complete.X14, complete.X8, method="spearman")[4]
cor.test(data$X14, data$X18, method="spearman")[4]
cor.test(X_imputados$X14, X_imputados$X18, method="spearman")[4]
cor.test(complete.X14, complete.X18, method="spearman")[4]
# X18
cor.test(data$X18, data$X5, method="spearman")[4]
cor.test(X_imputados$X18, X_imputados$X5, method="spearman")[4]
cor.test(complete.X18, complete.X5, method="spearman")[4]
cor.test(data$X18, data$X8, method="spearman")[4]
cor.test(X_imputados$X18, X_imputados$X8, method="spearman")[4]
cor.test(complete.X18, complete.X8, method="spearman")[4]
cor.test(data$X18, data$X14, method="spearman")[4]
cor.test(X_imputados$X18, X_imputados$X14, method="spearman")[4]
cor.test(complete.X18, complete.X14, method="spearman")[4]
reg_monto = impute_lm(data,X5+X8+X14+X18~monto)
head(reg_monto)
reg_monto = impute_lm(varObjt,X5+X8+X14+X18~monto)
head(reg_monto)
reg_monto = impute_lm(varObjt,monto~X5+X8+X14+X18)
head(reg_monto)
reg_monto = impute_lm(X_imputados,monto~X5+X8+X14+X18)
head(reg_monto)
summary(data$monto)
summary(reg_monto$monto)
sumamry(monto_cs_imputacion)
monto_cs_imputacion
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1|size)
varObjt
# Imputar con el promedio con su grupo correspondiente (factor)
monto_imputado <- impute_lm(varObjt, monto~1)
monto_imputado
summary(data$monto)
summary(reg_monto$monto)
sumamry(monto_imputado$monto)
sumamry(monto_imputado)
monto_imputado$monto
summary(data$monto)
summary(reg_monto$monto)
summary(monto_imputado$monto)
summary(data$monto)
sd(data$monto, na.rm=TRUE)
summary(monto_imputado$monto)
sd(monto_imputado$monto, na.rm=TRUE)
summary(reg_monto$monto)
sd(reg_monto$monto, na.rm=TRUE)
