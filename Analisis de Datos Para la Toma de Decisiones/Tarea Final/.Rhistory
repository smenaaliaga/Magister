Xobs <- (30-1)*sd(T_Espera)^2/ 1.69
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
head(dat)
name(dat)
names(dat)
comu_nivel <- table(data$Comuna, data$Nivel)
type(dat)
class(dat)
class(dat$Comuna)
class(dat$Nivel)
dat$Comuna <- as.factor(dat$Comuna)
comu_nivel <- table(data$Comuna, data$Nivel)
dat$Comuna
head(dat)
comu_nivel <- table(data$Comuna, data$Nivel)
comu_nivel <- table(dat$Comuna, dat$Nivel)
comu_nivel
summary(comu_nivel)
summary(dat)
dat$Acceso <- as.factor(dat$Comuna)
summary(dat)
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
attach(dat)
library(tidyverse)
ggplot(dat, aes(RM)) +
geom_histogram(bins = 8, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
ggplot(dat, aes(RM)) +
geom_histogram(bins = 8, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(x="", y=RM)) +
geom_boxplot() +
ggtitle("Resistencia media de compresión en cerámicas") +
xlab("Cerámica") + ylab("kg/cm2") +
theme_minimal()
ggplot(dat, aes(RM)) +
geom_histogram(bins = 8, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
#ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(x="", y=RM)) +
geom_boxplot() +
xlab("Cerámica") + ylab("kg/cm2") +
#ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(RM)) +
geom_histogram(bins = 8, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(x="", y=RM)) +
geom_boxplot() +
xlab("Cerámica") + ylab("kg/cm2") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
library(car)
qqPlot(RM)
attach(dat)
qqPlot(RM)
qqPlot(dat)
qqPlot(RM)
qqline(RM, col = "steelblue", lwd = 2)
qqnorm(RM, pch = 1, frame = FALSE)
qqline(RM, col = "steelblue", lwd = 2)
library(moments)
skewness(RM)
kurtosis(RM)
ks.test(RM,pnorm,mean(RM),sd(RM))
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
# Ho <=  5040 [kg/cm2]
# H1 >  5040 [kg/cm2]
mean(RM)
qnorm(0.05,mean=0,sd=1)
qnorm(1-0.05,mean=0,sd=1)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
Zobs
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
randNorm <- rnorm(300000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
library(tidyverse)
library(moments)
library(car)
#valores al azar de la distribución normal
randNorm <- rnorm(100000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(300000)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(1000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(1000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(10000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
attach(dat)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
# Parte 3
pnorm(Zobs,mean=0,sd=1)
# Parte 3
pnorm(Zobs,mean=0,sd=1)
# Parte 3
t.test(RM,mu=5040,alternative="greater",conf.level=0.95)
qnorm(1-0.07,mean=0,sd=1)
1-0.05
1-0.07
# Parte 3
t.test(RM,mu=5040,alternative="greater",conf.level=0.93)
#### Pregunta 2 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
#### Pregunta 2 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
head(dat)
#### Pregunta 2 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
head(dat)
attach(dat)
summary(C1)
## Parte 1
ceiling(1 + 3.322 * log10(length(RM)))
## Parte 1
ceiling(1 + 3.322 * log10(length(C1)))
ggplot(dat, aes(C1)) +
geom_histogram(bins = 7, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
hist(C1)
ggplot(dat, aes(C1)) +
geom_histogram(bins = 5, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(C1)) +
geom_histogram(bins = 6, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(C1)) +
geom_histogram(bins = 5, color="white") +
xlab("kg/cm2") + ylab("Frecuencia") +
ggtitle("Resistencia media de compresión en cerámicas") +
theme_minimal()
ggplot(dat, aes(C1)) +
geom_histogram(bins = 5, color="white") +
xlab("Cantidad") + ylab("Frecuencia") +
ggtitle("Bicicletas solicidas por centro público") +
theme_minimal()
ggplot(dat, aes(C1)) +
geom_histogram(bins = 5, color="white") +
xlab("Cantidad") + ylab("Frecuencia") +
ggtitle("Bicicletas diarias solicidas por centro público") +
theme_minimal()
ggplot(dat, aes(x="", y=C1)) +
geom_boxplot() +
xlab("Bicicletas") + ylab("Cantidad") +
ggtitle("Bicicletas diarias solicidas por centro público") +
theme_minimal()
qqnorm(C1, pch = 1, frame = FALSE)
qqline(C1, col = "steelblue", lwd = 2)
skewness(C1)
kurtosis(C1)
shapiro.test(C1)
## Parte 2
Zobs <- (mean(RM) - 83) * sqrt(25) / sd(RM)
## Parte 2
Tobs <- (mean(RM) - 83) * sqrt(25) / sd(RM)
rm(Zobs)
## Parte 2
Tobs <- (mean(C1) - 83) * sqrt(25) / sd(C1)
qchisq(0.06,24,lower.tail=F)
qt(0.06,24,lower.tail=F)
qt(0.15,24,lower.tail=F)
Zobs <- (7.6 - 8) * sqrt(25) / 0,5
Zobs <- (7.6 - 8) * sqrt(25) / 0.5
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
Zobs <- (7.6 - 8) * sqrt(25) / 0.5
#valores al azar de la distribución normal
randNorm <- rnorm(10000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 1) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
library(tidyverse)
#valores al azar de la distribución normal
randNorm <- rnorm(10000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 1) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(1000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 1) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(5000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 1) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 0.7) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(1000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 0.7) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
#valores al azar de la distribución normal
randNorm <- rnorm(3000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 0.7) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point(size = 1) +
labs(x = "Normal Estandar", y = "Densidad") +
theme_minimal()
Zobs <- (7.6 - 8) * sqrt(25) / 0.5
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
Zobs <- (7.6 - 8) * sqrt(25) / 0.5
Zobs <- ( (7.6 - 8) * sqrt(25) ) / 0.5
Zobs <- ( (7.6 - 8) * sqrt(50) ) / 0.5
#### Pregunta 3 ####
qnorm(0.01,mean=0,sd=1)
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrrt( ( 0.67 * (1-0.67) ) / 17 )
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
qnorm(0,1)
qnorm(0.1)
qnorm(0.1/2)
library(tidyverse)
library(moments)
library(car)
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
head(dat)
attach(dat)
summary(RM)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
qnorm(Zobs)
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
qnorm(RM,sd)
pnorm(Zobs)
# Parte 3
t.test(RM,mu=5040,alternative="greater",conf.level=0.93)
1-pnorm(Zobs)
68/99
Pobs <- ( (68/99) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
Pobs <- ( (68/99) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
#### Pregunta 4 ####
Pobs <- ( (8/17) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
Pobs <- ( (68/99) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
qnorm(0.1/2)
qnorm(0.1/2)
Pobs <- ( (68/99) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
Pobs <- ( (68/99) - 0.67 ) / sqrt( ( 0.67 * (1-0.67) ) / 17 )
library(tidyverse)
library(moments)
library(car)
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
head(dat)
attach(dat)
# Parte 4
Zobs <- (mean(RM) - 5050) * sqrt(30) / sd(RM)
qnorm(1-0.07,mean=0,sd=1)
# Parte 4
Zobs <- (mean(RM) - 5050) * sqrt(30) / sd(RM)
# Parte 4
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
# Parte 4
Zobs <- (mean(RM) - 5050) * sqrt(30) / sd(RM)
#### Pregunta 1 ####
dat <- read.csv(file.choose(),header=T,sep=";",dec=",")
attach(dat)
attach(dat)
summary(RM)
# Parte 4
Zobs <- (mean(RM) - 5050) * sqrt(30) / sd(RM)
# Parte 4
Zobs <- (mean(RM) - 5040) * sqrt(30) / sd(RM)
# Parte 4
Zobs <- (mean(RM) - 5050) * sqrt(30) / sd(RM)
qnorm(1-0.07,mean=0,sd=1)
qnorm(1-0.05,mean=0,sd=1)
Zobs <- ( (7.6 - 8) * sqrt(50) ) / 0.5
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
#### Pregunta 3 ####
qnorm(0.01/2,mean=0,sd=1)
-2.576 * 0.5 / ( (7.6 - 8) * sqrt(50) )
## Parte 2
# Region de rechazo original -2.576 y 2.576
Zobs <- ( (7.6 - 9) * sqrt(50) ) / 0.5
## Parte 2
# Region de rechazo original -2.576 y 2.576
( (7.6 - 9) * sqrt(50) ) / 0.5
Zobs <- ( (7.6 - 11) * sqrt(50) ) / 0.5
-2.576 * 0.5 / ( (7.6 - 11) * sqrt(50) )
-2.576 * 0.5 / ( (7.6 - 0) * sqrt(50) )
-2.576 * 0.5 / ( (7.6 - 100) * sqrt(50) )
pnorm(-2.576 * 0.5 / ( (7.6 - 9) * sqrt(50) ))
pnorm(-2.576 * 0.5 / ( (7.6 - 11) * sqrt(50) ))
pnorm(-2.576 * 0.5 / ( (7.6 - 0) * sqrt(50) ))
pnorm(-2.576 * 0.5 / ( (7.6 - 100) * sqrt(50) ))
?pnorm
2*pnorm(-2.576 * 0.5 / ( (7.6 - 100) * sqrt(50) ))
source('C:/Users/smena/Google Drive/Central de proyecto e ideas/Magister/Tarea 2/Tarea2.R', encoding = 'UTF-8')
install.packages(nortest)
install.packages("nortest")
?var.test
dat1 <- read.csv2("P3.csv")
View(dat)
setwd("C:/Users/smena/Google Drive/Magister/ANALISIS DE DATOS PARA LA TOMA DE DECISIONES/Tarea Final")
library(tidyverse)
dat1 <- read.csv2("P3.csv")
var.test(dat1$P1)
var.test(dat1$P1,dat1$P2)
var.test(dat1$P1,dat1$P3)
var.test(dat1$P1,dat1$P4)
var.test(dat1$P2,dat1$P3)
var.test(dat1$P2,dat1$P4)
var.test(dat1$P3,dat1$P4)
ks.test(dat2$Satis)
df2 <- ColapsarMuestras(dat2)
ks.test(dat2$Satis)
df2 <- ColapsarMuestras(dat2)
dat2 <- read.csv2("P4.csv")
ks.test(dat2$Satis)
ks.test(dat2$A1)
ks.test(dat2$A2)
ks.test(dat2$A3)
ks.test(dat2$A4)
?ks.test
ks.test(dat2$Satis, "pnorm", mean(dat2$Satis), sd(dat2$Satis))
ks.test(dat2$Satis, "pnorm", mean(dat2$Satis), sd(dat2$Satis))
ks.test(dat2$A1, "pnorm", mean(dat2$A1), sd(dat2$A1))
ks.test(dat2$A2, "pnorm", mean(dat2$A2), sd(dat2$A2))
ks.test(dat2$A3, "pnorm", mean(dat2$A3), sd(dat2$A3))
ks.test(dat2$A4, "pnorm", mean(dat2$A4), sd(dat2$A4))
?cor.test
?corrplot
?corrplot
library(corrplot)
install.packages("corrplot")
# Graficación de correlación
library(corrplot)
corrplot(dat2, method = "ellipse")
corrplot(dat2, method = "circle")
df2 <- ColapsarMuestras(dat2)
# Se agrupan las muestras en solo 2 columnas: identificador y dato
ColapsarMuestras <- function(dat){
df <- tibble(x = "DELETE", y = 0)
for(j in 1:ncol(dat)){
for(i in 1:nrow(dat)){
df <- df %>% add_row(x = colnames(dat)[j], y = dat[i,j])
}
}
df <- df[-1,]
df
}
df2 <- ColapsarMuestras(dat2)
corrplot(df2, method = "circle")
# Graficación de correlación
?cor
M <- cor(dat2, method="spearman")
corrplot(M, method = "circle", type = "upper")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
cor.test(dat2$Satis, dat2$A1, method = "spearman")
cor.test(dat2$A2, dat2$Satis, method = "spearman")
cor.test(dat2$A2, dat2$Satis, method = "spearman")
cor.test(dat2$A3, dat2$Satis, method = "spearman")
cor.test(dat2$A4, dat2$Satis, method = "spearman")
?cor.test
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
cor.test(dat2$A2, dat2$Satis, method = "spearman")
cor.test(dat2$A3, dat2$Satis, method = "spearman")
cor.test(dat2$A4, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
# Coeficiente de correlación de Spearman
cor.test(dat2$A1, dat2$Satis, method = "spearman")
cor.test(dat2$A2, dat2$Satis, method = "spearman")
cor.test(dat2$A3, dat2$Satis, method = "spearman")
cor.test(dat2$A3, dat2$Satis, method = "spearman")
cor.test(dat2$A4, dat2$Satis, method = "spearman")
?cor.test
?ppois
ppois(4,3)
qnorm(0.2)
